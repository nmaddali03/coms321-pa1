// X0 = addr
// X1 = length
fill:
	SUB X9, X1, XZR
	//if X1 = 0, end
	CBZ X9, end_fill
	STUR X1, [X0, #0]
	SUBI X1, X1, #1
	ADDI X0, X0, #8
	B fill
end_fill:
	BR LR

// X5 = addr
// X7 = pos
// X2 = final
shiftRight:
	LDUR X7, [SP, #32] // load X7
	LDUR X5, [SP, #8] // load X5
	SUBI X14, X2, #1 // X14 = final - 1 (i)
shiftRightLoop:
	SUB X14, X14, X7
	ADDI X15, X14, #1
	// if i + 1 = pos, end loop
	CBZ X15, end_shift_right_loop
	// else
	ADD X14, X14, X7
	LSL X13, X14, #3
	ADD X13, X13, X5
	LDUR X12, [X13, #0] // X21 = addr[i]
	ADDI X13, X13, #8
	STUR X12, [X13, #0] // addr[i + 1] = addr[i]
	SUBI X14, X14, #1
	B shiftRightLoop
end_shift_right_loop:
	STUR X5, [SP, #8] // store X5
	STUR X7, [SP, #32] // store X7
	BR LR

//X5 = addr
//X1 = val
//X2 = final
findSortedPos:
	ADD X0, XZR, XZR //zero out X0 to prepare for a return
	LDUR X5, [SP, #8]
	LDUR X2, [SP, #24]
findSortedPosLoop:
	LSL X11, X0, #3
	ADD X11, X11, X5
	LDUR X11, [X11, #0] //X11 = addr[i]
	//if addr[i] >= val, break out loop and return i
	SUBS X11, X11, X1
	BGE end_find_pos_loop
	//if i = final, break out loop and return i
	SUB X12, X2, X0
	CBZ X12, end_find_pos_loop
	//else continue the loop
	ADDI X0, X0, #1
	B findSortedPosLoop
end_find_pos_loop:
	STUR X5, [SP, #8] //store X5
	STUR X2, [SP, #24] //store X2
	BR LR